trigger:
- master

pool:
  name: Self-Hosted-Laptop
  demands: maven

resources:
  repositories:
  - repository: yourGitHubRepo
    type: github
    endpoint: Github-ServiceConnection
    name: sudhvihaan/Azure-CICD-Examples

stages:
- stage: CI
  jobs:
  - job: JobBuild
    steps:
    - script: |
        git clone https://github.com/sudhvihaan/Azure-CICD-Examples.git
        # Now, navigate to the specific subdirectory
        cd Azure-CICD-Examples/04-CICD-PL-Java-SpringBootApp-AzureApps
      displayName: 'DM- Clone Git and navigate to subdirectory'

    - task: Maven@3
      displayName: 'DM- Build Java Application'
      inputs:
        mavenPomFile: '04-CICD-PL-Java-SpringBootApp-AzureApps/gs-spring-boot-master/gs-spring-boot-master/app/pom.xml'  # Path to your project's POM file
        goals: 'package -Dmaven.test.skip=true'  # Specify the Maven goals, e.g., clean, package, etc.
        publishJUnitResults: false  # If you don't have JUnit tests, set this to false

    - task: CopyFiles@2
      displayName: 'DM- Copy to ArtifacDirectory'
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)/s/04-CICD-PL-Java-SpringBootApp-AzureApps/gs-spring-boot-master/gs-spring-boot-master/app/target'  # Replace with the actual path
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - script: 
        dir $(Build.ArtifactStagingDirectory)
      displayName: 'DM- Display Artifact Directory'

    - task: PublishBuildArtifacts@1
      displayName: 'DM- Publish the build to Artifact'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Path to your built JAR or WAR file
        artifactName: 'MyJavaApp'  # Give your artifact a name

- stage:
  jobs:
    - job: DeployAzureApp
      steps:
      - script: |
          git clone https://github.com/sudhvihaan/Azure-CICD-Examples.git
          # Now, navigate to the specific subdirectory
          cd Azure-CICD-Examples/04-CICD-PL-Java-SpringBootApp-AzureApps/Terraform
        displayName: 'DM- Clone Git and navigate to Terraform Directory'

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(Build.SourcesDirectory)/04-CICD-PL-Java-SpringBootApp-AzureApps/Terraform'
          backendServiceArm: 'service-connection-for-CICD-java-Spring-Boot'
          backendAzureRmResourceGroupName: 'AKS-HEMLDemo'
          backendAzureRmStorageAccountName: 'storageac6674'
          backendAzureRmContainerName: 'storestafefile'
          backendAzureRmKey: 'statefile.tfstate'

      - script: |
          terraform import azurerm_resource_group.RG /subscriptions/8bf47336-0c8c-46f5-8b73-3174f08ce9f3/resourceGroups/RG_JAVA_APP
          displayName: 'Import Existing Resource'
          workingDirectory: '$(Build.SourcesDirectory)/path-to-your-terraform-config'


      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(Build.SourcesDirectory)/04-CICD-PL-Java-SpringBootApp-AzureApps/Terraform'

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'service-connection-for-CICD-java-Spring-Boot' 
          workingDirectory: '$(Build.SourcesDirectory)/04-CICD-PL-Java-SpringBootApp-AzureApps/Terraform'

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Aprove'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '--auto-approve'
          environmentServiceNameAzureRM: 'service-connection-for-CICD-java-Spring-Boot'
          workingDirectory: '$(Build.SourcesDirectory)/04-CICD-PL-Java-SpringBootApp-AzureApps/Terraform'
