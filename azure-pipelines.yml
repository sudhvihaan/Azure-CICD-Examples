trigger:
- master

pool:
  name: Self-Hosted-Laptop
  demands: maven

resources:
  repositories:
  - repository: yourGitHubRepo
    type: github
    endpoint: git-service-connection
    name: sudhvihaan/Azure-CICD-Examples


stages:
- stage: Stage_CI_Azure_ResourceProvisioning_via_Terraform
  jobs:
    - job: DeployAzureApp
      displayName: 'DM- Clone Git and navigate to Terraform Directory'
      steps:
      - script: |
          git clone https://github.com/sudhvihaan/Azure-CICD-Examples.git
          # Now, navigate to the specific subdirectory
          cd Azure-CICD-Examples/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Terraform
          


      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(Build.SourcesDirectory)/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Terraform'
          backendServiceArm: 'Service-Connection-To-Koushik-ProjectCICD-2nd'
          backendAzureRmResourceGroupName: 'AKS-HEMLDemo'
          backendAzureRmStorageAccountName: 'storageac6674'
          backendAzureRmContainerName: 'storestafefile'
          backendAzureRmKey: 'state-2nd-JSB.tfstate'

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(Build.SourcesDirectory)/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Terraform'

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: 'Service-Connection-To-Koushik-ProjectCICD-2nd' 
          workingDirectory: '$(Build.SourcesDirectory)/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Terraform'
        

      - task: TerraformTaskV4@4
        displayName: 'DM-Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '--auto-approve'
          environmentServiceNameAzureRM: 'Service-Connection-To-Koushik-ProjectCICD-2nd'
          workingDirectory: '$(Build.SourcesDirectory)/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Terraform'



- stage: Stage_CI_Build_App_Maven
  jobs:
  - job: JobBuild
    steps:
    - script: |
        git clone https://github.com/sudhvihaan/Azure-CICD-Examples.git
        # Now, navigate to the specific subdirectory
        cd Azure-CICD-Examples/05-CICDPL-Java-SprintBootApp2-AzureWebApps
      displayName: 'DM- Clone Git and navigate to subdirectory'

    - task: Maven@3
      displayName: 'DM- Build Java Application'
      inputs:
      
        mavenPomFile: '05-CICDPL-Java-SprintBootApp2-AzureWebApps/Java-Spring-Boot-HelloWorld/pom.xml'        
        goals: 'package -Dmaven.test.skip=true'  # Specify the Maven goals, e.g., clean, package, etc.
        publishJUnitResults: false  # If you don't have JUnit tests, set this to false

    - task: CopyFiles@2
      displayName: 'DM- Copy to ArtifactDirectory'
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)/s/05-CICDPL-Java-SprintBootApp2-AzureWebApps/Java-Spring-Boot-HelloWorld'  # Replace with the actual path
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - script: 
        dir $(Build.ArtifactStagingDirectory)
      displayName: 'DM- Display Artifact Directory'

    - task: PublishBuildArtifacts@1
      displayName: 'DM- Publish the build to Artifact'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Path to your built JAR or WAR file
        artifactName: 'HelloWorld'  # Give your artifact a name


    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Service-Connection-To-Koushik-ProjectCICD-2nd'
        appType: 'webApp'
        WebAppName: 'azuretestcicd76757-asp'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/*.jar'
        ScriptType: 'Inline Script'
        InlineScript: 'java -jar /home/site/wwwroot/Hello-world-0.0.1-SANPSHOT.jar --server.port=8080'





